<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!--<link rel="stylesheet" href="/styles/style.css">-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.7.5/proj4.js"></script>
    <title>Weather Harmony</title>
</head>

<body>
<h1>Weather Harmony</h1>

<div id="weather">
    <p id="city">
    </p>
    <p id="weatherInfo">
    </p>
    <img id="weatherIcon" src="img/loding.gif" alt="icon">
    <p id="currentTemp">
    </p>
    <p id="feels_temp">
    </p>
    <p id="humidity">
    </p>
    <p id="wind_speed">
    </p>
    <p id="temp_min">
    </p>
    <p id="temp_max">
    </p>
</div>
<div id="recommendedSongs">

</div>

<!-- 여기에 날씨 정보와 추천된 노래를 표시하는 부분을 추가하세요 -->
</body>
<script>
    let latitude;
    let longitude;

    const city = document.getElementById('city');
    const weatherInfo = document.getElementById('weatherInfo');
    const weatherIcon = document.getElementById('weatherIcon');
    const currentTemp = document.getElementById('currentTemp');
    const feels_temp = document.getElementById('feels_temp');
    const humidity = document.getElementById('humidity');
    const wind_speed = document.getElementById('wind_speed');
    const temp_min = document.getElementById('temp_min');
    const temp_max = document.getElementById('temp_max');

    async function getCurrentPositionWeather() {
        try {
            await currentPosition();
            let today = new Date();
            let date = `${today.getFullYear()}`+`${today.getMonth()+1}`+`${today.getDate()}`;
            let time = `${today.getHours()}`+`${today.getMinutes()}`;

            const weatherData = await fetch('/currentPosition', {
                method: 'post',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ lat: latitude, lon: longitude, date: date, time: time }),
            }).then(response => response.json());

            city.textContent=weatherData.city;
            weatherInfo.textContent=weatherData.weatherInfo;
            weatherIcon.src=weatherData.weatherIcon;
            currentTemp.textContent='현재 기온 : '+weatherData.temp+'℃';
            feels_temp.textContent='체감 기온 : '+weatherData.feels_temp+'℃';
            humidity.textContent='습도 : '+weatherData.humidity+'%';
            wind_speed.textContent='풍속 : '+weatherData.wind_speed+'m/s';
            temp_min.textContent='최저 기온 : '+weatherData.temp_min+'℃';
            temp_max.textContent='최고 기온 : '+weatherData.temp_max+'℃';

            const weatherRecommendedSong = await fetch('/searchSong',{
                method: 'post',
            }).then(response => response.json());

            console.log(weatherRecommendedSong);
            // recommendedSongs div 찾기
            const recommendedSongsDiv = document.getElementById('recommendedSongs');

            // 각 노래를 돌면서 HTML에 추가
            weatherRecommendedSong.forEach(song => {
                const songDiv = document.createElement('div');
                songDiv.classList.add('recommendedSong');

                const img = document.createElement('img');
                img.src = song.img;
                img.alt = song.name;
                img.classList.add('songImg');

                const nameParagraph = document.createElement('p');
                nameParagraph.textContent = song.name;
                nameParagraph.classList.add('name');

                const artistParagraph = document.createElement('p');
                artistParagraph.textContent = song.artist;
                artistParagraph.classList.add('artist');

                songDiv.appendChild(img);
                songDiv.appendChild(nameParagraph);
                songDiv.appendChild(artistParagraph);

                recommendedSongsDiv.appendChild(songDiv);
            });

        } catch (error) {
            console.error('Error:', error);
        }
    }

    async function currentPosition(){
        return new Promise((resolve, reject)=>{
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        latitude = position.coords.latitude;
                        longitude = position.coords.longitude;

                        // 여기에서 위치 정보를 활용한 추가 작업을 수행할 수 있습니다.
                        resolve();
                    },
                    (error) => {
                        console.error('위치 정보를 가져오는데 실패했습니다.', error);
                        reject(error);
                    }
                );
            } else {
                console.error('Geolocation이 지원되지 않습니다.');
                reject('Geolocation이 지원되지 않습니다.');
            }
        });
    }


    getCurrentPositionWeather();
</script>
</html>