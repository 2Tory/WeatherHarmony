<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles/index.css">
    <title>Weather Harmony</title>
</head>

<body>
<div id="container">
    <h1>Weather Harmony</h1>
    <div id="weather">
        <p id="city"></p>
        <img id="weatherIcon" src="img/loding.gif" alt="icon">
        <p id="currentTemp"></p>
        <p id="weatherInfo"></p>
        <div id="tempEtc">
            <p id="feels_temp"></p>
            <p id="humidity"></p>
            <p id="wind_speed"></p>
        </div>
        <div id="sun">
            <p id="sunrise"></p>
            <p id="sunset"></p>
        </div>
    </div>
    <div id="recommendedSongs">
    </div>
</div>
</body>
<script>
    let latitude;
    let longitude;

    const city = document.getElementById('city');
    const weatherInfo = document.getElementById('weatherInfo');
    const weatherIcon = document.getElementById('weatherIcon');
    const currentTemp = document.getElementById('currentTemp');
    const feels_temp = document.getElementById('feels_temp');
    const humidity = document.getElementById('humidity');
    const wind_speed = document.getElementById('wind_speed');
    const sunrise = document.getElementById('sunrise');
    const sunset = document.getElementById('sunset');

    async function getCurrentPositionWeather() {
        try {
            await currentPosition();
            let today = new Date();
            let date = `${today.getFullYear()}`+`${today.getMonth()+1}`+`${today.getDate()}`;
            let time = `${today.getHours()}`+`${today.getMinutes()}`;

            const weatherData = await fetch('/currentPosition', {
                method: 'post',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ lat: latitude, lon: longitude, date: date, time: time }),
            }).then(response => response.json());

            city.textContent=weatherData.city;
            weatherInfo.textContent=weatherData.weatherInfo;
            weatherIcon.src='/img/'+weatherData.weatherIcon+'.png';
            currentTemp.textContent=weatherData.temp+'℃';
            feels_temp.textContent='체감 기온 : '+weatherData.feels_temp+'℃';
            humidity.textContent='습도 : '+weatherData.humidity+'%';
            wind_speed.textContent='풍속 : '+weatherData.wind_speed+'m/s';
            sunrise.textContent='일출 시간 : '+convertUnixTimestampToKST(weatherData.sunrise).toLocaleTimeString();
            sunset.textContent='일몰 시간 : '+convertUnixTimestampToKST(weatherData.sunset).toLocaleTimeString();

            const weatherRecommendedSong = await fetch('/searchSong',{
                method: 'post',
            }).then(response => response.json());

            // recommendedSongs div 찾기
            const recommendedSongsDiv = document.getElementById('recommendedSongs');

            // 각 노래를 돌면서 HTML에 추가
            weatherRecommendedSong.forEach(song => {
                const songDiv = document.createElement('div');
                songDiv.classList.add('recommendedSong');

                const img = document.createElement('img');
                if (song.img) {
                    img.src = song.img;
                    img.alt = song.name;
                } else {
                    // 기본 이미지 URL을 여기에 추가하세요.
                    img.src = 'img/default.png';
                    img.alt = '기본 이미지';
                }
                img.classList.add('songImg');
                const artistParagraph = document.createElement('p');
                artistParagraph.textContent = song.artist+' -';
                artistParagraph.classList.add('artist');
                const nameParagraph = document.createElement('p');
                nameParagraph.textContent = song.name;
                nameParagraph.classList.add('name');

                songDiv.appendChild(img);
                songDiv.appendChild(artistParagraph);
                songDiv.appendChild(nameParagraph);

                recommendedSongsDiv.appendChild(songDiv);
            });

        } catch (error) {
            console.error('Error:', error);
        }
    }

    async function currentPosition(){
        return new Promise((resolve, reject)=>{
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        latitude = position.coords.latitude;
                        longitude = position.coords.longitude;

                        resolve();
                    },
                    (error) => {
                        console.error('위치 정보를 가져오는데 실패했습니다.', error);
                        reject(error);
                    }
                );
            } else {
                console.error('Geolocation이 지원되지 않습니다.');
                reject('Geolocation이 지원되지 않습니다.');
            }
        });
    }

    function convertUnixTimestampToKST(unixTimestamp) {
        // OpenWeatherMap API에서 반환한 Unix 타임스탬프는 초 단위이므로 1000을 곱하여 밀리초 단위로 변환
        const milliseconds = unixTimestamp * 1000;

        // UTC 시간으로 변환
        const utcDate = new Date(milliseconds);

        // UTC 시간에서 한국 시간(KST)으로 변환
        const koreanDate = new Date(utcDate.toLocaleString("en-US", { timeZone: "Asia/Seoul" }));

        return koreanDate;
    }

    getCurrentPositionWeather();
</script>
</html>